# data file for the FLTK User Interface Designer (FLUID)
version 2.1000 
images_dir header_name 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
decl {\#include <fltk/ask.h>} {} 

decl {\#include <fltk/Image.h>} {} 

decl {\#include <fltk/SharedImage.h>} {} 

decl {\#include <stdlib.h>} {} 

decl {\#include <stdio.h>} {} 

decl {\#include <locale>} {} 

decl {\#include "test.h"} {public
} 

class QuestionViewUI {open
} {
  decl {int win_x, win_y;} {}
  decl {bool fullscreen_flag;} {}
  decl {Test* currTest;} {}
  Function {QuestionViewUI()} {open
  } {
    {fltk::Window} mainWindow {open
      private xywh {479 49 800 600} resizable visible
    } {
      {fltk::Group} {} {open
        private xywh {0 0 800 600} resizable
      } {
        {fltk::Group} LeftGroup {open
          private xywh {5 5 450 590} resizable box THIN_DOWN_BOX
        } {
          {fltk::Group} QuestionGroup {open
            private xywh {5 5 440 465} box THIN_UP_BOX
          } {
            {fltk::TextDisplay} questionDisplay {
              label {Question \#/\#}
              private xywh {5 20 430 130} align 1 labeltype ENGRAVED_LABEL labelsize 18 textsize 16
              extra_code {o->wrap_mode(true);}
            }
            {fltk::Group} AnswerGroup {open
              private xywh {5 155 430 305} box THIN_DOWN_BOX
            } {
              {fltk::RadioButton} {answerRB[0]} {
                label {Answer 0}
                callback {if (selectedRB() > -1) validateBtn->activate();
else validateBtn->deactivate();}
                private xywh {5 1 420 75} align 164 buttonbox BORDER_BOX labelsize 16 textsize 16
              }
              {fltk::RadioButton} {answerRB[1]} {
                label {Answer 1}
                callback cb_answerRB
                private xywh {5 77 420 75} align 164 buttonbox BORDER_BOX labelsize 16 textsize 16
              }
              {fltk::RadioButton} {answerRB[2]} {
                label {Answer 2}
                callback cb_answerRB
                private xywh {5 153 420 75} align 164 buttonbox BORDER_BOX labelsize 16 textsize 16
              }
              {fltk::RadioButton} {answerRB[3]} {
                label {Answer 3}
                callback cb_answerRB
                private xywh {5 229 420 75} align 164 buttonbox BORDER_BOX labelsize 16 textsize 16
              }
            }
          }
          {fltk::Group} MainControlsGroup {open
            private xywh {5 475 440 110} box THIN_UP_BOX
          } {
            {fltk::Button} exitBtn {
              label Exit
              callback {if (fltk::ask("Do you want to quit?")) exit(0);}
              private xywh {10 15 115 80} labelfont 1
            }
            {fltk::Button} fullscreenBtn {
              label Fullscreen
              callback {if (this->fullscreen_flag) 
{
    mainWindow->fullscreen_off( win_x, win_y,800,600);
    mainWindow->set_non_modal();
}
else 
{
    win_x = mainWindow->x();
    win_y = mainWindow->y();
    mainWindow->fullscreen();
    mainWindow->set_modal();
    
}
  
if (fullscreen_flag) fullscreen_flag=false;
else fullscreen_flag=true;}
              private xywh {165 15 115 80} labelfont 1 labelsize 14
            }
            {fltk::Button} auxBtn {
              label Aux
              private xywh {315 15 115 80} deactivate labelfont 1 labelsize 14
            }
          }
        }
        {fltk::Group} RightGroup {open
          private xywh {455 5 340 590} box THIN_DOWN_BOX
        } {
          {fltk::Widget} imageHolder {
            private xywh {5 5 330 300}
          }
          {fltk::Group} QuestionControlsGroup {open
            private xywh {5 310 330 275} resizable box THIN_UP_BOX
          } {
            {fltk::Button} validateBtn {
              label {Validate Answer  @+1+}
              callback {nextBtn->do_callback(o);} selected
              private xywh {15 25 300 100} deactivate labeltype EMBOSSED_LABEL labelsize 16
            }
            {fltk::Button} nextBtn {
              label {Next Question  @+1>@+1>[]}
              callback {// get user input answer
currTest->selectAnswerOfCurrentQuestion(selectedRB());

// validate the answer of current question
if ( strcmp(o->label(), "Validate Answer  @+1+") == 0 ) currTest->verifyAnswerOfCurrentQuestion();	  

//check if test is completed
if (currTest->completed()) 
{
  fltk::message("Απαντήσατε:\\n%d από τις %d ερωτήσεις σωστά.",currTest->getCorrect(), currTest->getAOQ());
  
  Test *w = new Test(currTest->wrongQuestions(),currTest->getAOQ()-currTest->getCorrect());
  w->showResults();
  setTest(w);
}
// load next question
else 
showQuestion(currTest->next());  //Question *q = currTest->next();}
              private xywh {15 150 300 100} labeltype EMBOSSED_LABEL labelsize 16
            }
          }
        }
      }
    }
    code {win_x = 0; win_y = 0;
fullscreen_flag = false;} {}
    code {fltk::register_images();} {}
  }
  Function {show()} {} {
    code {mainWindow->show();} {}
  }
  Function {selectedRB()} {private return_type int
  } {
    code {for (int i=0; i<4; i++) 
{
  if ( answerRB[i]->visible() && answerRB[i]->state() )
	return i;
}
return -1;} {}
  }
  Function {showQuestion(Question* q)} {private
  } {
    code {//questionDisplay->label(q->getBookSection());
char qNo[150];
sprintf(qNo, "Ερώτηση %i/%i",currTest->getCursor()+1,currTest->getAOQ());
mainWindow->label(qNo);
questionDisplay->copy_label(qNo);
questionDisplay->text(q->title());

// reset answer buttons
for (unsigned int i=0; i<4; i++) {
	answerRB[i]->state(false);
	answerRB[i]->labelcolor((fltk::Color)56);
	if ( i >= q->getAOA() ) answerRB[i]->hide();
	else answerRB[i]->show();
	
}
 
for (unsigned int i=0; i<q->getAOA(); i++) 
{
	answerRB[i]->label(q->getAnswer(i));
}
answerRB[q->getSelectedAnswer()]->state(true);
answerRB[q->getCorrectAnswer()]->labelcolor((fltk::Color)0xff00);

char imgPath[MAXIMGFILESIZE];
sprintf(imgPath, "img/%s.jpg",q->image());
locale loc;
use_facet< ctype<char> >(loc).tolower ( imgPath, imgPath+sizeof(imgPath) );
cout << imgPath <<endl;
imageHolder->image( fltk::SharedImage::get(imgPath) );
imageHolder->redraw();
mainWindow->redraw();

if ( q->getSelectedAnswer() == -1 || q->isVerified()) 
{
	validateBtn->deactivate();
}
else 
{
	validateBtn->activate();
}} {}
  }
  Function {setTest(Test* t)} {} {
    code {currTest = t;
showQuestion(currTest->next());} {}
  }
} 
